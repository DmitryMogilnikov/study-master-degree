df_min_temp <- read.csv('Nizhnevartovsk_min_temperature.csv', sep=',', header = TRUE)
df_min_temp$date <- as.Date(df_min_temp$date, "%Y-%m-%d")
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=min(df_min_temp$date),
end=max(df_min_temp$date)
)
install.packages('forecast')
time <- time(df_ts)
time
install.packages('forecast')
install.packages("forecast")
library(forecast)
sudo apt-get install libcurl4-openssl-dev libxml2-dev
install.packages('forecast')
install.packages('lubridate')
df_min_temp <- read.csv('Nizhnevartovsk_min_temperature.csv', sep=',', header = TRUE)
df_min_temp$date <- as.Date(df_min_temp$date, "%Y-%m-%d")
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-12-17")),
)
library(lubridate)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-12-17")),
)
time <- time(df_ts)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-11-17")),
)
time <- time(df_ts)
df_min_temp <- read.csv('Nizhnevartovsk_min_temperature.csv', sep=',', header = TRUE)
df_min_temp$date <- as.Date(df_min_temp$date, "%Y-%m-%d")
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-11-17"))
)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-10-17"))
)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2000-11-17"))
)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-10-17"))
)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-9-17"))
)
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2016-11-17"))
)
time <- time(df_ts)
time
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-12-17"))
)
time <- time(df_ts)
time
time[0]
time[1]
library(forecast)
library(lubridate)
df_min_temp <- read.csv('Nizhnevartovsk_min_temperature.csv', sep=',', header = TRUE)
head(df_min_temp, 20)
#Спарсим первую колонку в правильное значение даты
df_min_temp$date <- as.Date(df_min_temp$date, "%Y-%m-%d")
#Сформируем time-series, начиная с 2017-11-17
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-11-17")),
)
#создадим переменную с датами
time <- time(df_ts)
#разделим на тестовую (15% ~270 элементов) и тестовую выборку
n_test <- 270
n_train <- length(df_ts) - n_test
df_train <- window(df_ts, start=time[1], end=time[n_train])
df_test <- window(df_ts, start=time[n_train+1], end=time[n_train+n_test])
df_naive <- naive(df_train, h=270)
df_naive.residuals
install.packages('knitr')
install.packages("knitr")
time_summer
df_summer <- (subset(df_min_temp, month(df_min_temp$date)>5 & month(df_min_temp$date)<9))
library(forecast)
library(lubridate)
df_min_temp <- read.csv('Nizhnevartovsk_min_temperature.csv', sep=',', header = TRUE)
head(df_min_temp, 20)
#Спарсим первую колонку в правильное значение даты
df_min_temp$date <- as.Date(df_min_temp$date, "%Y-%m-%d")
df_ts = ts(df_min_temp$min_temperature,
frequency=365,
start=decimal_date(ymd("2017-11-17")),
)
#Построим временной ряд:
plot(df_ts)
# Видим, что наблюдается сезонная периодичность, что естественно
#создадим переменную с датами
time <- time(df_ts)
n_test <- 270
n_train <- length(df_ts) - n_test
df_train <- window(df_ts, start=time[1], end=time[n_train])
df_test <- window(df_ts, start=time[n_train+1], end=time[n_train+n_test])
```
n_test <- 270
n_train <- length(df_ts) - n_test
df_train <- window(df_ts, start=time[1], end=time[n_train])
df_test <- window(df_ts, start=time[n_train+1], end=time[n_train+n_test])
n_test <- 270
n_train <- length(df_ts) - n_test
df_train <- window(df_ts, start=time[1], end=time[n_train])
df_test <- window(df_ts, start=time[n_train+1], end=time[n_train+n_test])
library(knitr)
df_naive <- naive(df_train, h=270)
df_snaive <- snaive(df_train, h=270)
acc_naive <- accuracy(df_naive, df_test)
acc_snaive <- accuracy(df_snaive, df_test)
df_ar <- arima(df_train, c(1,0,0))
df_ar_res <-predict(df_ar, n.ahead=270)
acc_ar <- accuracy(df_ar_res$pred, df_test)
# Рассмотрим скользящее среднее
df_ma <- arima(df_train, c(0,0,1))
df_ma_res <-predict(df_ma, n.ahead=270)
acc_ma <- accuracy(df_ma_res$pred, df_test)
# Рассмотрим полную ARIMA
df_arima <- arima(df_train, c(1,1,1))
df_arima_res <-predict(df_arima, n.ahead=270)
acc_arima <- accuracy(df_arima_res$pred, df_test)
kable(acc_naive)
# Сезонная модель
kable(acc_snaive)
# Авторегрессионная модель
kable(acc_ar)
# Скользящее среднее
kable(acc_ma)
# Полная ARIMA
kable(acc_arima)
plot(df_test, main="Forecast", xlab="Date", ylab="t_min")
lines(df_naive$mean, col="yellow")
lines(df_snaive$mean, col="red")
lines(df_ar_res$pred, col="blue")
lines(df_ma_res$pred, col="green")
lines(df_arima_res$pred, col="purple")
legend("topleft",
legend=c("Наивная модель", "Сезонная модель", "Авторегрессионная модель", "Скользящее среднее", "ARIMA"),
col=c("yellow", "red", "blue", "green", "purple"), lty = 1:1, cex=0.5)
df_summer <- (subset(df_min_temp, month(df_min_temp$date)>5 & month(df_min_temp$date)<9))
#Сформируем time-series, начиная с 2017-11-17
df_summer_ts = ts(df_summer$min_temperature,
frequency=92,
start=decimal_date(ymd("2018-06-01")),
)
plot(df_summer_ts)
# Видим, что наблюдается сезонная периодичность, что естественно
#создадим переменную с датами
time_summer <- time(df_summer_ts)
n_test_summer <- 60
n_train_summer <- length(df_summer_ts) - n_test_summer
df_train_summer <- window(df_summer_ts, start=time_summer[1], end=time_summer[n_train_summer])
df_test_summer <- window(df_summer_ts, start=time_summer[n_train_summer+1], end=time_summer[n_train_summer+n_test_summer])
time_summer
df_summer_ts = ts(df_summer$min_temperature,
frequency=4,
start=decimal_date(ymd("2018-06-01")),
)
df_summer_ts
df_summer_ts = ts(df_summer$min_temperature,
frequency=92,
start=decimal_date(ymd("2018-06-01")),
)
df_summer_ts
time_summer <- time(df_summer_ts)
time_summer
View(df_summer)
df_summer_ts = ts(df_summer$min_temperature,
frequency=4,
start=decimal_date(ymd("2018-06-01")),
)
plot(df_summer_ts)
df_summer_ts = ts(df_summer$min_temperature,
frequency=92,
start=decimal_date(ymd("2018-06-01")),
)
df_summer_ts = ts(df_summer$min_temperature,
frequency=93,
start=decimal_date(ymd("2018-06-01")),
)
plot(df_summer_ts)
df_summer_ts = ts(df_summer$min_temperature,
frequency = 102,
start=decimal_date(ymd("2018-06-01")),
)
plot(df_summer_ts)
df_summer_ts
time_summer <- time(df_summer_ts)
time_summer
df_summer_ts = ts(df_summer$min_temperature,
frequency=92,
start=decimal_date(ymd("2018-06-01")),
)
plot(df_summer_ts)
time_summer <- time(df_summer_ts)
time_summer
df_summer <- (subset(df_min_temp, month(df_min_temp$date)>5 & month(df_min_temp$date)<9))
df_summer_ts = ts(df_summer$min_temperature,
frequency=92,
start = c(2018, 1)
)
plot(df_summer_ts)
time_summer <- time(df_summer_ts)
print(time_summer)
n_test_summer <- 60
n_train_summer <- length(df_summer_ts) - n_test_summer
df_train_summer <- window(df_summer_ts, start=time_summer[1], end=time_summer[n_train_summer])
df_test_summer <- window(df_summer_ts, start=time_summer[n_train_summer+1], end=time_summer[n_train_summer+n_test_summer])
df_naive_summer <- naive(df_train_summer, h=n_test_summer)
df_snaive_summer <- snaive(df_train_summer, h=n_test_summer)
acc_naive_summer <- accuracy(df_naive_summer, df_test)
